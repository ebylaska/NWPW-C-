Density Functional Theory (DFT)

There are N_o orbitals, and each is a mesh with N_g points (3D, total # pts)

Small case
    N_g = 128^3
    N_o  = 500
    N_A  ~= 500
    N_proj = 4


V_NL = Non-local pseudopotential

1.0 The Non-local pseudopotential
--------------------------------

90% to 98% of the overall
Very expensive, but very parallel
Goes in parallel with the other work
N_g * (N_proj * N_A)  -->  Nproj * Na ~= N_o

Compute for each orbital i
    V_NL psi_i = SUM_(I,p) | PHI_p^I> C_p <PHI_p^I PSI_i >

PSI_i  : N_g x 1 column vector



for  i = 0 : N_o - 1
   for I = 0 : N_A - 1
        for p = 0 : N_proj - 1
           Sum = 0
           for G = 0 : N_g -1
              sum += PSI_i(G) * PHI_p^I(G)
           Sum = Sum * C_p

           for G = 0 : N_g -1
              PSI_i(G) += PHI_p^I(G) * Sum
        end for
    end for
end for


For each i :
    Column vector times C_p * Dot product of a row vector and column vector

Or, generate an N_g x N_o matrix of PSIs

    (N_g x 1 column vector for PHI)  *  C_p *
        ( 1 x N_g  row vector for PHI * N_g x N_o PSI)


This can be structured into big dgemms


2.0 Orthogonalization
---------------------

 Compute Overlap matrix S    [ N_o^2 * N_g , (N_o x N_o) matrix]
   diagonalize S -> Lambda   [ N_o^3, QR repeatedly)
   Apply Lambda to PSI       


   S = PSI^t * PSI 
   PSI is N_g x N_o

A small calculation.
Below some threshold, you'll want to run in serial
Cost of collecting distributed PSI can be costly

If you distribute PSI by  rows (N_g), works out smoothly
    [Good or Orthogonalization]
If you  distribute by columns (N_o), not so smooth because
you cut across distribution columnns to generate pieces of LAMBDA PSI
But, it is optimal with respect to the FFT, since you take the
FFT for each orbital independently.
    [Good for FFT]


