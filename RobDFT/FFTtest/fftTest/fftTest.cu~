#include <iostream>
using namespace std;

#include <thrust/host_vector.h>
#include <thrust/device_vector.h>

#include <cufft.h>

cufftHandle fftPlanMany_C2R, fftPlanMany_R2C;
cufftHandle fftPlan_C2R, fftPlan_R2C;

template <typename Real>
void inline initFFTs(int *dim, int neall)
{
  // Create a batched 3D plan
  
    if(sizeof(Real) == sizeof(float) ) {
	cufftPlanMany(&fftPlanMany_C2R, 3, dim, NULL, 1, 0, NULL, 1, 0, CUFFT_C2R,neall);
	cufftPlanMany(&fftPlanMany_R2C, 3, dim, NULL, 1, 0, NULL, 1, 0, CUFFT_R2C,neall);
	cufftPlan3d(&fftPlan_C2R, dim[0], dim[1], dim[2], CUFFT_C2R);
	cufftPlan3d(&fftPlan_R2C, dim[0], dim[1], dim[2], CUFFT_R2C);
      } else {
	cufftPlanMany(&fftPlanMany_C2R, 3, dim, NULL, 1, 0, NULL, 1, 0, CUFFT_Z2D,neall);
	cufftPlanMany(&fftPlanMany_R2C, 3, dim, NULL, 1, 0, NULL, 1, 0, CUFFT_D2Z,neall);
	cufftPlan3d(&fftPlan_C2R, dim[0], dim[1], dim[2], CUFFT_Z2D);
	cufftPlan3d(&fftPlan_R2C, dim[0], dim[1], dim[2], CUFFT_D2Z);
      }
    
#ifdef FFT_ALL
    cufftSetCompatibilityMode(fftPlanMany_C2R, CUFFT_COMPATIBILITY_FFTW_ALL);
    cufftSetCompatibilityMode(fftPlanMany_R2C, CUFFT_COMPATIBILITY_FFTW_ALL);
    cufftSetCompatibilityMode(fftPlan_C2R, CUFFT_COMPATIBILITY_FFTW_ALL);
    cufftSetCompatibilityMode(fftPlan_R2C, CUFFT_COMPATIBILITY_FFTW_ALL);
#else
    cufftSetCompatibilityMode(fftPlanMany_C2R, CUFFT_COMPATIBILITY_NATIVE);
    cufftSetCompatibilityMode(fftPlanMany_R2C, CUFFT_COMPATIBILITY_NATIVE);
    cufftSetCompatibilityMode(fftPlan_C2R, CUFFT_COMPATIBILITY_NATIVE);
    cufftSetCompatibilityMode(fftPlan_R2C, CUFFT_COMPATIBILITY_NATIVE);
#endif
  }
  
inline void _FFTerror(int ret) {
  switch(ret) {
  case CUFFT_SETUP_FAILED: cerr << "SETUP_FAILED" << endl; break;
  case CUFFT_INVALID_PLAN: cerr << "INVALID_PLAN" << endl; break;
  case CUFFT_INVALID_VALUE: cerr << "INVALID_VALUE" << endl; break;
  case CUFFT_EXEC_FAILED: cerr << "EXEC_FAILED" << endl; break;
  default: cerr << "UNKNOWN ret code " << ret << endl;
  }
}
//template specialization to handle different data types (float,double)
inline void crFFT_(cufftHandle myFFTplan, float* A, float* B ) {
  int ret=cufftExecC2R(myFFTplan, (cufftComplex*)A,(cufftReal*) B);
  if(ret != CUFFT_SUCCESS) {
    cerr << "C2R FFT failed! ret code " << ret << endl; _FFTerror(ret); exit(1);
  }
}
inline void crFFT_(cufftHandle myFFTplan, double* A, double* B ) {
  int ret = cufftExecZ2D(myFFTplan, (cufftDoubleComplex*)A,(cufftDoubleReal*) B);
  if(ret != CUFFT_SUCCESS) {
    cerr << "Z2D FFT failed! ret code " << ret << endl; _FFTerror(ret); exit(1);
  }
}
inline void rcFFT_(cufftHandle myFFTplan, float* A, float* B ) {
  int ret = cufftExecR2C(myFFTplan, (cufftReal*)A,(cufftComplex*) B);
  if(ret != CUFFT_SUCCESS) {
    cerr << "C R2C FFT failed!" << endl; _FFTerror(ret); exit(1);
  }
}
inline void rcFFT_(cufftHandle myFFTplan, double* A, double* B ) {
  int ret = cufftExecD2Z(myFFTplan, (cufftDoubleReal*)A,(cufftDoubleComplex*) B);
  if(ret != CUFFT_SUCCESS) {
    cerr << "D2Z FFT failed!" << endl; _FFTerror(ret); exit(1);
  }
}
template <typename Real>
inline void rcFFT_neall( Real* A, Real* B ) { rcFFT_(fftPlanMany_R2C, A,B); }
template <typename Real>
inline void crFFT_neall( Real* A, Real* B ) { crFFT_(fftPlanMany_C2R, A,B); }
template <typename Real>
inline void rcFFT_single( Real* A, Real* B ) { rcFFT_(fftPlan_R2C, A,B); }
template <typename Real>
inline void crFFT_single( Real* A, Real* B ) { crFFT_(fftPlan_C2R, A,B); }


template <typename Real, typename Real2>
static void test(int *dim, int neall)
{
}
 
main(int argc, char *argv[])
{
  int dim[] = { 16, 16, 16};
  int neall=2;
  initFFTs<float>(dim,neall);
  
  thrust::host_vector<float> testData(dim[0]*dim[1]*dim[2]*neall);
  test<float, float2>(dim, neall);
}
