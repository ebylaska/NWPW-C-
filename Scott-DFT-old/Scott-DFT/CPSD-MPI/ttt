
/********************************
 *                              *
 *         d3db::t_read         *
 *                              *
 ********************************/
void d3db::t_read(const int iunit, double *a, const int jcol)
{
   int jstart,jend,fillcolumn,index,ii,jj,p_to,p_here;
   int taskid   = parall->taskid();
   int taskid_j = parall->taskid_j();
   int np_j     = parall->np_i();
   
   if (jcol<0) 
   {
      jstart = 0;
      jend   = np_j-1;
      fillcolumn = 1;
   }
   else
   {
      jstart = jend = jcol;
      fillcolumn = (taskid==jcol);
   }

   /**********************
    **** slab mapping ****
    **********************/
   if (maptype==1)
   { 
      double *tmp = new double[(nx/2+1)*ny];
      int   bsize = (nx/2+1)*ny;
   
      /**** master node reads from file and distributes ****/
      if (taskid==MASTER)
         for (int k=0; k<nz; ++k)
         {
            dread(iunit,tmp,bsize);

            index = ijktoindex(0,0,k);
            ii    = ijktop(0,0,k);
            for (jj=jstart; jj<=jend; ++jj)
            {
               p_to = parall->convert_taskid_ij(ii,jj);
               if (p_to==MASTER)
                  for (int k=0; k<bsize; ++k) a[index+k] = tmp[k];
               else
                  parall->dsend(1,9,p_to,bsize,tmp);
            }
         }
      
      /**** not master node ****/
      else if (fillcolumn) 
         for (int k=0; k<nz; ++k)
         {
            index = ijktoindex(0,0,k);
            ii    = ijktop(0,0,k);
            p_here = parall->convert_taskid_ij(ii,taskid_j);
            if (p_here==taskid)
            { 
               parall->dreceive(1,9,MASTER,bsize,tmp);
               for (int k=0; k<bsize; ++k) a[index+k] = tmp[k];
            }
         }
	  
      delete [] tmp;
   }
   
   /*************************
    **** hilbert mapping ****
    *************************/
   else
   {
      double *tmp = new double[nx/2+1];
      int bsize = (nx/2+1);
         
      /**** master node reads from file and distributes ****/
      if (taskid==MASTER)
         for (int k=0; k<nz; ++k)
         for (int j=0; j<ny; ++j)
         {

            dread(iunit,tmp,bsize);

            index  = ijktoindex2t(0,j,k);
            ii     = ijktop2(0,j,k);
            for (int jj=jstart; jj<=jend; ++jj)
            {
               p_to = parall->convert_taskid_ij(ii,jj);

               if (p_to==MASTER) 
                  for (int k=0; k<bsize; ++k) a[index+k] = tmp[k];
               else
                  parall->dsend(1,9,p_to,bsize,tmp);
            }
         }
      
      /**** not master node ****/
      else if (fillcolumn) 
         for (int k=0; k<nz; ++k)
         for (int j=0; j<ny; ++j)
         {
            index  = ijktoindex2t(0,j,k);
            ii     = ijktop2(0,j,k);
            p_here = parall->convert_taskid_ij(ii,taskid_j);
            if (p_here==taskid) 
            {
               parall->dreceive(1,9,MASTER,bsize,tmp);
               for (int k=0; k<bsize; ++k) a[index+k] = tmp[k];
            }
         }

      delete [] tmp;
   }

}
